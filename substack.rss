<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0"><channel><title><![CDATA[The Data Engineering Newsletter]]></title><description><![CDATA[I am data engineer at Walmart and I write about data engineering concepts and best practices.]]></description><link>https://shubhamgondane.substack.com</link><image><url>https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fshubhamgondane.substack.com%2Fimg%2Fsubstack.png</url><title>The Data Engineering Newsletter</title><link>https://shubhamgondane.substack.com</link></image><generator>Substack</generator><lastBuildDate>Fri, 28 Feb 2025 05:05:20 GMT</lastBuildDate><atom:link href="https://shubhamgondane.substack.com/feed" rel="self" type="application/rss+xml"/><copyright><![CDATA[Shubham Gondane]]></copyright><language><![CDATA[en]]></language><webMaster><![CDATA[DataEnggNewsletter@substack.com]]></webMaster><itunes:owner><itunes:email><![CDATA[DataEnggNewsletter@substack.com]]></itunes:email><itunes:name><![CDATA[Shubham Gondane]]></itunes:name></itunes:owner><itunes:author><![CDATA[Shubham Gondane]]></itunes:author><googleplay:owner><![CDATA[DataEnggNewsletter@substack.com]]></googleplay:owner><googleplay:email><![CDATA[DataEnggNewsletter@substack.com]]></googleplay:email><googleplay:author><![CDATA[Shubham Gondane]]></googleplay:author><item><title><![CDATA[Cost Optimization Part 2]]></title><description><![CDATA[Take your Spark pipelines to the next level! Dive into advanced optimization techniques for faster processing and reduced costs.]]></description><link>https://shubhamgondane.substack.com/p/cost-optimization-part-2</link><guid isPermaLink="false">https://shubhamgondane.substack.com/p/cost-optimization-part-2</guid><dc:creator><![CDATA[Shubham Gondane]]></dc:creator><pubDate>Mon, 20 Jan 2025 06:01:26 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2 is-viewable-img" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg" width="728" height="728" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:728,&quot;bytes&quot;:372437,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" class="sizing-normal" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9def3797-326b-4217-a840-5a3c49ffdd3a_2048x2048.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><div class="pencraft pc-display-flex pc-gap-8 pc-reset"><div class="pencraft pc-reset icon-container restack-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg></div><div class="pencraft pc-reset icon-container view-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2"><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></div></div></a></figure></div><p>In the <a href="https://shubhamgondane.substack.com/p/data-engineering-cost-optimization?r=52p1v">previous post</a>, I covered a few general optimization techniques to reduce the cost of running your Spark pipelines. These techniques were simple enough to try for quick gains. This post focuses on advanced techniques and combinations to further optimize your pipeline.</p><p></p><div class="subscription-widget-wrap-editor" data-attrs="{&quot;url&quot;:&quot;https://shubhamgondane.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading The Data Engineering Newsletter! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><h2>Compression</h2><div class="captioned-image-container"><figure><a class="image-link image2 is-viewable-img" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png" width="1389" height="1095" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1095,&quot;width&quot;:1389,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1022847,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb83e16f1-4e26-4208-a526-ca6c02b6d649_1389x1095.png 1456w" sizes="100vw"></picture><div class="image-link-expand"><div class="pencraft pc-display-flex pc-gap-8 pc-reset"><div class="pencraft pc-reset icon-container restack-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg></div><div class="pencraft pc-reset icon-container view-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2"><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></div></div></a></figure></div><p>Data compression involves making data smaller without losing its essential information. In Spark, where we process large volumes of data, compression helps improve pipeline performance by:</p><ul><li><p><strong>Reducing disk I/O and network usage:</strong> Compressed data takes up less space, leading to faster read/write operations and reduced data transfer times.</p></li><li><p><strong>Lowering storage costs:</strong> Smaller data footprints translate to lower storage costs, especially in cloud environments.</p></li></ul><p>Spark offers various compression codecs, each with its own benefits and tradeoffs:</p><ul><li><p><strong>Snappy:</strong> Developed by Google, Snappy prioritizes high speeds and reasonable compression over maximum compression ratios. It's a good general-purpose codec.</p></li><li><p><strong>Zstd (Zstandard):</strong> Developed by Facebook, Zstd provides high compression ratios and fast compression speeds. It even includes a "dictionary compression" mode for small data.</p></li><li><p><strong>LZ4:</strong> This lossless compression algorithm offers extremely fast compression and decompression speeds, often reaching RAM speed limits on multi-core systems.</p></li></ul><p><strong>Enabling Compression in Spark:</strong></p><p>The default compression codec in Spark is Snappy. To change it, for example to Zstd, you can set the compression option during write operations:</p><p>PySpark</p><pre><code><code>df.write.option("compression", "zstd").parquet("path/to/output") 
</code></code></pre><p>This code snippet shows how to write the DataFrame to Parquet files at the specified path using Zstd compression.</p><p>Selecting the optimal compression codec depends heavily on your data characteristics and specific use case. Snappy is a popular choice due to its speed and reasonable compression. However, if minimizing storage space is critical, consider Zstd, which offers higher compression ratios but may require slightly more processing time. Ultimately, the best approach is to experiment with different codecs and evaluate their performance based on your needs and priorities.</p><p></p><h2>Salting</h2><p>Salting is a well-known technique for handling data skew in Apache Spark. Data skew occurs when data is unevenly distributed across partitions, leading to inefficient resource utilization, longer processing times, and increased costs.</p><p>For example, imagine joining two Spark DataFrames where one has skewed data. This means a join column's values are concentrated in a few partitions, while others remain relatively empty. This imbalance forces a few partitions to do most of the work, creating bottlenecks.</p><p>Here's how salting can help:</p><ol><li><p><strong>Identify the skewed key:</strong> Determine the column causing the skew.</p></li><li><p><strong>Add a random salt to the key:</strong> Introduce random prefixes or suffixes to the skewed key values. This redistributes data more evenly across partitions.</p></li><li><p><strong>Repartition and join:</strong> Repartition both DataFrames using the salted key and perform the join.</p></li></ol><p><strong>Example:</strong></p><p>PySpark</p><pre><code><code>df = df.withColumn('salted_col', concat(col('skewed_col'), lit('_'), rand())) 
</code></code></pre><p>This code adds a random number to the skewed_col creating a salted_col.</p><p>While salting is a valuable tool for mitigating data skew, it's crucial to understand your data and assess whether salting is the appropriate solution. In some cases, alternative techniques like broadcast joins or pre-processing the skewed data might be more effective.</p><p></p><h2>Cost-Based Optimizer (CBO)</h2><div class="captioned-image-container"><figure><a class="image-link image2 is-viewable-img" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg" width="2048" height="827" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:827,&quot;width&quot;:2048,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:450602,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd12be1da-b217-4b08-a54c-842d86a34d14_2048x827.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><div class="pencraft pc-display-flex pc-gap-8 pc-reset"><div class="pencraft pc-reset icon-container restack-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg></div><div class="pencraft pc-reset icon-container view-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2"><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></div></div></a></figure></div><p>The Cost-Based Optimizer (CBO) is a technique in Spark SQL that enhances query performance. It uses statistical data to estimate the cost of different query execution plans and selects the most efficient one.</p><p>To leverage CBO, you first need to collect table and column statistics using the <code>ANALYZE TABLE</code> command. This provides Spark with information about data distribution, cardinality, and other factors. CBO is disabled by default, but you can enable it by setting the following configuration in your app:</p><pre><code><code>spark.sql.cbo.enabled = true</code></code></pre><p>By analyzing these statistics, CBO helps Spark make informed decisions about how to execute SQL queries, leading to significant performance improvements, especially for complex queries and large datasets. This translates to faster query processing and reduced resource consumption.</p><p></p><h2>Checkpointing</h2><div class="captioned-image-container"><figure><a class="image-link image2 is-viewable-img" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg" width="1704" height="1383" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1383,&quot;width&quot;:1704,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:307553,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" class="sizing-normal" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F246a4784-f33d-412a-a111-131a41b20477_1704x1383.jpeg 1456w" sizes="100vw" loading="lazy"></picture><div class="image-link-expand"><div class="pencraft pc-display-flex pc-gap-8 pc-reset"><div class="pencraft pc-reset icon-container restack-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg></div><div class="pencraft pc-reset icon-container view-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2"><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></div></div></a></figure></div><p></p><p>In ETL processes, we often use caching or persisting when performing multiple actions on the same DataFrame. The <code>cache()</code> method, by default, stores the DataFrame in memory. The <code>persist()</code> method offers more flexibility, allowing you to choose a specific storage level (e.g., memory-only, disk-only, or a combination).</p><p>However, checkpointing works differently. Instead of storing the DataFrame in memory, it saves it to a persistent storage system like HDFS or S3. A key difference is that checkpointing truncates the DataFrame's lineage.</p><p>While checkpointing might seem inefficient at first glance&#8212;retrieving data from disk is slower than accessing it from memory, and the lineage information is lost&#8212;it offers significant advantages in certain scenarios.</p><p>Checkpointing is particularly useful in stateful transformations, where data is processed over multiple batches. In these transformations, a long chain of dependencies between RDDs (Resilient Distributed Datasets) can develop. This makes recovery from failures time-consuming, as Spark needs to retrace the entire lineage to rebuild the data.</p><p>Checkpointing helps by breaking this dependency chain. By saving RDDs to persistent storage at specific points, it provides a recovery point. In case of an error, Spark can restart from the last checkpoint, significantly reducing recovery time and improving fault tolerance.</p><p>This approach is especially valuable for large datasets and complex computations, where the overhead of saving intermediate data to disk is outweighed by the potential cost of re-computing everything in case of a failure.</p><h2>Conclusion</h2><p>This is not an exhaustive list; many options exist for Spark optimization, ranging from simple "low-hanging fruit" to complex fine-tuning. However, as you progress from basic to advanced techniques, you'll encounter diminishing returns. At some point, it becomes impractical to invest further time and resources into optimizing an already highly optimized system.</p><p></p><p><strong>A note about the images:</strong> The visuals in this article were created with the assistance of Imagen 3, Google's text-to-image AI model.</p><div class="subscription-widget-wrap-editor" data-attrs="{&quot;url&quot;:&quot;https://shubhamgondane.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading The Data Engineering Newsletter! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div>]]></content:encoded></item><item><title><![CDATA[Data Engineering: Cost Optimization Part 1]]></title><description><![CDATA[Learn how to manage ETL costs by optimizing your spark jobs.]]></description><link>https://shubhamgondane.substack.com/p/data-engineering-cost-optimization</link><guid isPermaLink="false">https://shubhamgondane.substack.com/p/data-engineering-cost-optimization</guid><dc:creator><![CDATA[Shubham Gondane]]></dc:creator><pubDate>Fri, 02 Aug 2024 03:53:49 GMT</pubDate><enclosure url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2 is-viewable-img" target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic" data-component-name="Image2ToDOM"><div class="image2-inset"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic" width="1034" height="366" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:366,&quot;width&quot;:1034,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:13789,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/heic&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" class="sizing-normal" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F771fa1a4-ad48-4456-9391-c86328dcb585_1034x366.heic 1456w" sizes="100vw" fetchpriority="high"></picture><div class="image-link-expand"><div class="pencraft pc-display-flex pc-gap-8 pc-reset"><div class="pencraft pc-reset icon-container restack-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg></div><div class="pencraft pc-reset icon-container view-image"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-maximize2"><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" x2="14" y1="3" y2="10"></line><line x1="3" x2="10" y1="21" y2="14"></line></svg></div></div></div></div></a></figure></div><p>Apache Spark is a distributed processing system used for big data workloads, suitable for data engineering, machine learning, and data science use cases. As data engineers, we often manage hundreds of pipelines that process terabytes and petabytes of data. When developing a new ETL for a business case, the focus is typically not on the cost of running the pipelines. ETL optimization and cost reduction often come as an afterthought, usually prompted by reviewing the cloud cost bill.</p><p>Here are 4 ways that will help you reduce your ETL cost.</p><div class="subscription-widget-wrap-editor" data-attrs="{&quot;url&quot;:&quot;https://shubhamgondane.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading The Data Engineering Newsletter! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div><ul><li><p><strong>Reduce ETL run frequency</strong></p></li><li><p><strong>Process only what you need</strong></p></li><li><p><strong>Tune your Spark config</strong></p></li><li><p><strong>Tune your transformer/queries</strong></p></li></ul><p>Let&#8217;s cover each of these ideas in depth below.</p><h4>1. Reduce ETL run frequency</h4><p>One simple way to cut ETL costs is to assess if a pipeline is truly necessary. At times, we may develop a solution, only to discover months later that no one uses it. In such instances, we can just stop the pipeline.</p><p>However, what if someone does use the report generated by your pipeline? The crucial question is how often they access the report. Perhaps you refresh the data everyday, but the user only views the report monthly. In this scenario, you could reduce the ETL frequency to a monthly run.</p><p>A long-term solution involves considering this during the initial design stages. It's often sensible to ask the business whether they genuinely need the dashboard to be refreshed in real-time, hourly, or daily, and to push back when it doesn't seem necessary. See this amazing post by SeattleDataGuy where he explains how to <a href="https://seattledataguy.substack.com/p/understanding-business-needs-staying">understand business needs</a> in more detail.</p><div><hr></div><h4>2. Process only the what you need</h4><p>There are two methods to process your data efficiently:</p><ul><li><p>Only process the necessary records.</p></li><li><p>Only read what you need.</p></li></ul><p>The first method is straightforward: only process data that is essential for your use case. Often, we end up processing a fixed 30 or 60 days of data on each run, which can be wasteful if the data is static and never updated. However, sometimes it's necessary to read historical data for to calculate certain metrics, which can also be optimized.</p><p>For instance, we once had a pipeline that processed 6-7 years of data to calculate a few metrics. This pipeline ran every hour, making it quite costly. I redesigned the pipeline to process only the changes that occurred over the previous day. I did a one-time bootstrap, reading the last 7 years of data and calculated the metrics. Afterward, each run of the pipeline only updated the metrics with the changes from the previous day. This redesign cut the cost of that pipeline by over 65% and reduced the run time by 50%, improving our SLA (Service Level Agreement).</p><p>The second method involves selecting only the necessary columns for your job, especially when your data is stored in a columnar format like Parquet. Parquet offers significant advantages when running analytical queries. By reading only the necessary columns, we minimize time spent on I/O operations and speed up query processing.</p><p>Along with selecting necessary columns, we should also filter the data that we process. By filtering we can leverage Spark&#8217;s predicate pushdown to minimize the amount of data read.</p><div><hr></div><h4>3. Tune your spark config</h4><p>Another important aspect when it comes to reducing your pipeline is to understand how much resources does your job need. So a good place to start is to check if your job is underutilizing the Spark cluster.</p><p>Understanding Spark's resource consumption is crucial. Here are key parameters:</p><ul><li><p><strong>spark.executor.memory</strong>: Defines the amount of memory available to each executor</p></li><li><p><strong>spark.executor.instances</strong>: Determines the number of executors to run the Spark job</p></li><li><p><strong>spark.executor.cores</strong>: Specifies the number of cores per executor, which dictates the number of tasks an executor can run simultaneously</p></li><li><p><strong>spark.driver.memory</strong>: Determines the amount of memory available to the driver</p></li><li><p><strong>spark.driver.cores</strong>: Sets the number of cores available for the driver</p></li><li><p><strong>spark.sql.shuffle.partitions</strong>: Dictates the number of partitions to use when shuffling data (used in joins, aggregations, repartitions)</p></li><li><p><strong>spark.sql.default.parallelism</strong>: Sets the default number of RDDs returned by transformations like joins and aggregations</p></li></ul><p>Example:</p><pre><code>The first step is to decide on the number of executor cores, which means determining how many tasks an executor can run parallely. Make sure your applications fully utilize the number of cores available on your cluster node. For optimal I/O throughput, it's generally recommended to keep this number at 5.

After you've decided on the number of executor cores per node, the next step is to determine the number of executors per node. Let's assume you're running your application on a 4 node cluster. Assume each node has 16 cores and 104GB of memory.

If we finalize the executor cores at 5 and allocate 1 for Yarn processing, we're left with 15 cores per node. Since we have 4 nodes, the total number of cores is 60.

The total available executors then equals 60/5 = 12.

After designating 1 for the application manager, we're left with 11.

The number of executors per node is thus 12/4 = 3.

The memory per executor equals 104/3 = 34GB.

After accounting for a 10% overhead, the memory per executor is 34*0.9 = 30GB.</code></pre><p>You can set both spark.driver.memory and spark.driver.cores to the same values as spark.executor.memory and spark.executor.cores, respectively.</p><h5>Shuffle partitions</h5><p>The default value is 200. The optimal value greatly depends on your dataset size and the types of transformations you run on it. The goal is to strike a balance between parallelism and overhead.</p><p>Having too few partitions can result in data skew, where some partitions are significantly larger, causing certain tasks to take longer to finish.</p><p>Conversely, too many partitions can lead to inefficiencies due to having many small tasks. A good starting point is 2-3 times the number of cores in the cluster. You can then experiment and adjust this number based on resource utilization and performance.</p><h5>Dynamic allocation</h5><p>If you have multiple jobs running on the same cluster, consider using dynamic allocation. This allows your application to return resources to the cluster when they're not needed and request them again when there's demand.</p><div><hr></div><h4>4. Tune Your Transformer</h4><p>The transformer is where your data undergoes various operations. Here are some optimizations you can apply:</p><ul><li><p>Use dropDuplicates instead of distinct.</p></li><li><p>Minimize the use of user-defined functions (UDFs) and only use them when a function is not available in Spark SQL. UDFs often operate one row at a time, leading to high serialization overhead.</p></li><li><p>Utilize cache() and persist() to store intermediate computations in Spark for reuse in subsequent operations. Remember to unpersist when done!</p></li><li><p>Avoid using count() when exact counts are not necessary.</p></li><li><p>Do not use show() in production code.</p></li><li><p>Implement broadcast joins when one table is significantly smaller than the other. Spark 3 manages this automatically up to a max size of 8GB. This can be configured by setting the spark.sql.autoBroadcastJoinThreshold, which is defaulted to 10MB.</p></li><li><p>Use Adaptive Query Execution (AQE) in Spark 3.0 to help tackle performance issues.</p></li><li><p>Avoid repartition when possible as it triggers shuffle.</p></li></ul><div><hr></div><p>In conclusion, optimizing Spark pipelines involves strategic decisions and fine-tuning at various points in your ETL process. From reconsidering the frequency of your ETL runs and processing only the essential data, to tuning your Spark configuration and transformer, each step contributes to more efficient resource usage and cost reduction. It's crucial to understand your data, your resources, and the needs of your business to make the most out of your Spark applications. Remember, a well-optimized Spark application not only saves resources but also improves performance, reliability, and the overall value delivered to your business.</p><p>In the next part, we'll explore more advanced optimization techniques, such as salting and compression.</p><p>References:</p><p><a href="https://spark.apache.org/docs/latest/configuration.html">https://spark.apache.org/docs/latest/configuration.html</a></p><p><a href="https://joydipnath.medium.com/how-to-determine-executor-core-memory-and-size-for-a-spark-app-19310c60c0f7">https://joydipnath.medium.com/how-to-determine-executor-core-memory-and-size-for-a-spark-app-19310c60c0f7</a></p><p></p><div class="subscription-widget-wrap-editor" data-attrs="{&quot;url&quot;:&quot;https://shubhamgondane.substack.com/subscribe?&quot;,&quot;text&quot;:&quot;Subscribe&quot;,&quot;language&quot;:&quot;en&quot;}" data-component-name="SubscribeWidgetToDOM"><div class="subscription-widget show-subscribe"><div class="preamble"><p class="cta-caption">Thanks for reading The Data Engineering Newsletter! Subscribe for free to receive new posts and support my work.</p></div><form class="subscription-widget-subscribe"><input type="email" class="email-input" name="email" placeholder="Type your email&#8230;" tabindex="-1"><input type="submit" class="button primary" value="Subscribe"><div class="fake-input-wrapper"><div class="fake-input"></div><div class="fake-button"></div></div></form></div></div>]]></content:encoded></item></channel></rss>